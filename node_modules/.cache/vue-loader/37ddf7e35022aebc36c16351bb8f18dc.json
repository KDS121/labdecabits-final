{"remainingRequest":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\src\\components\\Projectdescription.vue?vue&type=template&id=ee2fb01a&","dependencies":[{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\src\\components\\Projectdescription.vue","mtime":1586253920460},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAicHJvamVjdCIgfSwKICAgIFsKICAgICAgX2MoCiAgICAgICAgImItY29udGFpbmVyIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNTdHlsZTogeyAibWFyZ2luLXRvcCI6ICI1MHB4Iiwgd2lkdGg6ICI5MCUiIH0sCiAgICAgICAgICBhdHRyczogeyBmbHVpZDogIiIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LXJvdyIsCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJ2LWNvbCIsCiAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IGNvbHM6ICI4IiB9IH0sCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJoZWFkaW5nUHIiIH0sIFsKICAgICAgICAgICAgICAgICAgICBfdm0uX3YoX3ZtLl9zKF92bS5wbmFtZS5wbmFtZSkpCiAgICAgICAgICAgICAgICAgIF0pLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAidi1jYXJkIiwKICAgICAgICAgICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJib3JkZXItcmFkaXVzIjogIjExcHggMTFweCAwcHggMHB4IiB9IH0sCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoInYtaW1nIiwgewogICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIndoaXRlLS10ZXh0IGFsaWduLWVuZCIsCiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgaGVpZ2h0OiAiNDAwcHgiLAogICAgICAgICAgICAgICAgICAgICAgICAgICJiYWNrZ3JvdW5kLXBvc2l0aW9uIjogImNlbnRlciIKICAgICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiBfdm0ucG5hbWUuaW1nIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoInYtY2FyZC10ZXh0IiwgeyBzdGF0aWNDbGFzczogInRleHQtLXByaW1hcnkiIH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX2MoInAiLCBbX3ZtLl92KF92bS5fcyhfdm0ucG5hbWUuZGVzY3JpcHRpb24pKV0pCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoInYtY29sIiwgewogICAgICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsgInBhZGRpbmctbGVmdCI6ICI1MHB4IiwgIm1hcmdpbi10b3AiOiAiMjBweCIgfSwKICAgICAgICAgICAgICAgIGF0dHJzOiB7IGNvbHM6ICI0IiB9CiAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApLAogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICBbCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJkZXNjIiB9LCBbCiAgICAgICAgICAgIF92bS5fdigiUHJvamVjdCBEZXNjcmlwdGlvbiAmIFNldHVwIikKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBPdXIgZm9yZW1vc3QgcHJvamVjdCBhdCBsYWJzIGRlY2FiaXRzIGlzIGNyZWF0ZWQgd2l0aCBhIHZpc2lvbiB0byBoZWxwIG90aGVyIHN0YXJ0dXBzIHRvIGZsb3VyaXNoICYgZ3JvdyB3aXRoIG1pbmltYWwgaW52ZXN0bWVudC4gVG8gYmVnaW4gd2l0aCwgd2Ugd2FudCB0byBwcm92aWRlIG91ciBjdXN0b21lcnMgd2l0aCB1dG1vc3QgY29udmVuaWVuY2UuICIKICAgICAgICAgICAgKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJjb250ZW50IiB9LCBbCiAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAiIEFueSBjb25zdW1lciB3aG8gd2FudHMgdG8gZXhwbG9yZSAmIGRlc2lnbiBsb2dvbWFrZXMgY2FuIGJlZ2luIHdpdGggc2VsZWN0aW5nL291dGxpbmluZyBhIGNvbXBhbnkgbmFtZSBmb2xsb3dlZCBieSBwaWNraW5nIGZvbnRzICYgY2FzZS4gVGhlIG5leHQgc3RlcCBmb3IgY3JlYXRpbmcgdGhlIHBlcmZlY3QgdHJhZGVtYXJrIGlzIGNvbm5lY3Rpbmcgc3ltYm9saWMgc2hhZGVzICYgY29sb3JzIHRvIGl0LiBNb3ZlIGZ1cnRoZXIgYnkgZGV0ZXJtaW5pbmcgJiBzcGVjaWZ5aW5nIG1lYW5pbmdmdWwgaWNvbnMgZm9yIGEgcGxlYXNpbmcgbGF5b3V0LiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBPdXIgaGlnaCB0ZWNoIHRlYW0gb2YgZGVzaWduZXJzICYgZGV2ZWxvcGVycyBoYXZlIGNvbGxhYm9yYXRlZCB0byBmYWJyaWNhdGUgdGhlIGZsYXdsZXNzIGxvZ29tYWtlcy4gV2l0aCBmcm9udGVuZCB0ZWNobm9sb2d5IGxpa2UgVnVlLkpTLCBIVE1MICYgQ1NTLSB0aGUgcHJvamVjdCB3YXMgc2V0IHVwICYgY29tcGxldGVkIHdpdGggcHJlY2lzaW9uICYgZnJ1aXRmdWwgcmVzdWx0cy4gQXBhcnQgZnJvbSB0aGUgYmFzaWMgdGVjaG5vbG9naWVzICYgY29kaW5nLCBhIHZlcnkgc3BlY2lhbCBwYXJ0ICYgY29wYXJ0IG9mIHRoaXMgcHJvamVjdCBpcyBjb250cmlidXRlZCBieSBhbiBpbmJ1aWx0IGNhbnZhcyBsaWJyYXJ5IGNhbGxlZCBGYWJyaWMuSlMuIEEgcG93ZXJmdWwgJiBzaW1wbGUgbGlicmFyeSB0byBidWlsZCBTVkdzLiBXaXRoIGFuIGVhc3kgeWV0IHJvYnVzdCB0ZWNoIHN0YWNrLCBMYWJzLmRlY2FiaXRzIGRlbGl2ZXJlZCBpdHMgdmVyeSBmaXJzdCBvcGVuIHNvdXJjZSB0b29sIGZvciBnb2luZyBsaXZlLiAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBIG5vdGV3b3J0aHkgZGV0YWlsICYgZmVhdHVyZSBtYWtlcyBpdHMgZnJlZSBkb3dubG9hZCBzZXJ2aWNlIG9mIHRoZSBsb2dvcywgaW4gYWxsIGZvcm1hdHMgbGlrZSBQTkcsIEpQRUcgJiBTVkcgKFdpdGggb3Igd2l0aG91dCBiYWNrZ3JvdW5kKSAiCiAgICAgICAgICAgICkKICAgICAgICAgIF0pLAogICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgIiBBbnkgbG9nbyB0aGUgY29uc3VtZXIgbWF5IGNyZWF0ZSB3aWxsIGRpcmVjdGx5IGJlIHNhdmVkIGluIHRoZSBnYWxsZXJpZXMsIGV2ZW4gaWYgeW91IGFyZSBoYWxmd2F5IHRocm91Z2guIE9uY2UgeW91IHdhbnQgdG8gZ2V0IGJhY2sgdG8gdGhlIGRlc2lnbiwgd2l0aCBhIHNpbmdsZSBjbGljayB0aGUgY29uc3VtZXIgd2lsbCBiZSByZWRpcmVjdGVkIHRvIGFuIGVkaXRhYmxlIGZpbGUgZm9yIG1ha2luZyB0aGUgbmVlZGZ1bCBhbHRlcmF0aW9ucy4gIgogICAgICAgICAgICApCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKAogICAgICAgICAgICAicCIsCiAgICAgICAgICAgIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi1sZWZ0IjogIjEwJSIsICJmb250LXdlaWdodCI6ICJib2xkIiB9IH0sCiAgICAgICAgICAgIFtfdm0uX3YoIiBTdGVwIDEgOiIpXQogICAgICAgICAgKSwKICAgICAgICAgIF9jKCJ2LWltZyIsIHsKICAgICAgICAgICAgc3RhdGljU3R5bGU6IHsKICAgICAgICAgICAgICBoZWlnaHQ6ICI2MCUiLAogICAgICAgICAgICAgIHdpZHRoOiAiNjAlIiwKICAgICAgICAgICAgICAibWFyZ2luLWxlZnQiOiAiMjAlIiwKICAgICAgICAgICAgICAibWFyZ2luLXRvcCI6ICIxMCUiCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF0dHJzOiB7IHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL2dpZjEuZ2lmIikgfQogICAgICAgICAgfSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgInAiLAogICAgICAgICAgICB7IHN0YXRpY1N0eWxlOiB7ICJtYXJnaW4tbGVmdCI6ICIxMCUiLCAiZm9udC13ZWlnaHQiOiAiYm9sZCIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCIgU3RlcCAyIDoiKV0KICAgICAgICAgICksCiAgICAgICAgICBfYygidi1pbWciLCB7CiAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgaGVpZ2h0OiAiNjAlIiwKICAgICAgICAgICAgICB3aWR0aDogIjYwJSIsCiAgICAgICAgICAgICAgIm1hcmdpbi1sZWZ0IjogIjIwJSIsCiAgICAgICAgICAgICAgIm1hcmdpbi10b3AiOiAiMTAlIgogICAgICAgICAgICB9LAogICAgICAgICAgICBhdHRyczogeyBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9naWYyLmdpZiIpIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJwIiwKICAgICAgICAgICAgeyBzdGF0aWNTdHlsZTogeyAibWFyZ2luLWxlZnQiOiAiMTAlIiwgImZvbnQtd2VpZ2h0IjogImJvbGQiIH0gfSwKICAgICAgICAgICAgW192bS5fdigiIFN0ZXAgMyA6IildCiAgICAgICAgICApLAogICAgICAgICAgX2MoInYtaW1nIiwgewogICAgICAgICAgICBzdGF0aWNTdHlsZTogewogICAgICAgICAgICAgIGhlaWdodDogIjYwJSIsCiAgICAgICAgICAgICAgd2lkdGg6ICI2MCUiLAogICAgICAgICAgICAgICJtYXJnaW4tbGVmdCI6ICIyMCUiLAogICAgICAgICAgICAgICJtYXJnaW4tdG9wIjogIjEwJSIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXR0cnM6IHsgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvZ2lmMy5naWYiKSB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF92bS5fbSgwKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAiY29udGVudCIgfSwgWwogICAgICBfdm0uX3YoCiAgICAgICAgIiBGZWVsIGZyZWUgdG8gZ2l2ZSB5b3VyIHN1Z2dlc3Rpb25zIG9yIGZlZWRiYWNrIGluIHRoZSBmb2xsb3dpbmcgbGluayBvciBtYWlsIHVzIGF0ICIKICAgICAgKSwKICAgICAgX2MoImEiLCB7IGF0dHJzOiB7IGhyZWY6ICJpbmZvQGRlY2FiaXRzLmNvbSIgfSB9LCBbCiAgICAgICAgX3ZtLl92KCJpbmZvQGRlY2FiaXRzLmNvbSIpCiAgICAgIF0pCiAgICBdKQogIH0KXQpyZW5kZXIuX3dpdGhTdHJpcHBlZCA9IHRydWUKCmV4cG9ydCB7IHJlbmRlciwgc3RhdGljUmVuZGVyRm5zIH0="}]}