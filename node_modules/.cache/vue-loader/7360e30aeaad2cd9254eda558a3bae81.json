{"remainingRequest":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vuetify-loader\\lib\\loader.js??ref--18-0!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\src\\components\\Services.vue?vue&type=template&id=3e51d18e&","dependencies":[{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\src\\components\\Services.vue","mtime":1586198788000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Karan\\Downloads\\Lab-Dec-20200407T072428Z-001\\Lab-Dec\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICB7IHN0YXRpY0NsYXNzOiAic2VydmljZXMiIH0sCiAgICBbCiAgICAgIF9jKAogICAgICAgICJ2LWFwcC1iYXIiLAogICAgICAgIHsgYXR0cnM6IHsgY29sb3I6ICJGRkZGRkYiLCBmaXhlZDogIiIgfSB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJ2LWFwcC1iYXItbmF2LWljb24iLCB7CiAgICAgICAgICAgIG9uOiB7CiAgICAgICAgICAgICAgY2xpY2s6IGZ1bmN0aW9uKCRldmVudCkgewogICAgICAgICAgICAgICAgX3ZtLmRyYXdlciA9ICFfdm0uZHJhd2VyCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICB9KSwKICAgICAgICAgIF9jKCJ2LWltZyIsIHsKICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29uIiwKICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICBzcmM6IHJlcXVpcmUoIi4uL2Fzc2V0cy9kZWNhYml0c2xvZ28uc3ZnIiksCiAgICAgICAgICAgICAgIm1heC1oZWlnaHQiOiAiNjAiLAogICAgICAgICAgICAgIGNvbnRhaW46ICIiCiAgICAgICAgICAgIH0KICAgICAgICAgIH0pCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJ2LW5hdmlnYXRpb24tZHJhd2VyIiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImluZG9nbyBuYXZkcmF3ZXIiLAogICAgICAgICAgYXR0cnM6IHsgYXBwOiAiIiwgY29sb3I6ICIjMjQ5NkZGIiwgd2lkdGg6ICI4MHB4IiB9LAogICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgdmFsdWU6IF92bS5kcmF3ZXIsCiAgICAgICAgICAgIGNhbGxiYWNrOiBmdW5jdGlvbigkJHYpIHsKICAgICAgICAgICAgICBfdm0uZHJhd2VyID0gJCR2CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cHJlc3Npb246ICJkcmF3ZXIiCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBbCiAgICAgICAgICBfYygidi1hcHAtYmFyLW5hdi1pY29uIiwgewogICAgICAgICAgICBzdGF0aWNDbGFzczogIm5hdmljb24gbXgtNCBteS00IiwKICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJ3aGl0ZSIgfSwKICAgICAgICAgICAgb246IHsKICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICBfdm0uZHJhd2VyID0gIV92bS5kcmF3ZXIKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJ2LWxpc3QiLAogICAgICAgICAgICB7IHN0YXRpY0NsYXNzOiAibGlzdCIgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgInYtbGlzdC1pdGVtLWdyb3VwIiwKICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgY29sb3I6ICJwcmltYXJ5IiB9LAogICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uaXRlbSwKICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICBfdm0uaXRlbSA9ICQkdgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIml0ZW0iCiAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICBfdm0uX2woX3ZtLml0ZW1zLCBmdW5jdGlvbihpdGVtLCBpKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBfYygKICAgICAgICAgICAgICAgICAgICAidi1saXN0LWl0ZW0iLAogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgIGtleTogaSwKICAgICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7IHJvdXRlcjogIiIsIHRvOiBpdGVtLnJvdXRlIH0sCiAgICAgICAgICAgICAgICAgICAgICBvbjogewogICAgICAgICAgICAgICAgICAgICAgICBjbGljazogZnVuY3Rpb24oJGV2ZW50KSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF92bS5zaG93Q29udGFjdChpdGVtLm5hbWUpCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICAgICAidi1saXN0LWl0ZW0taWNvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgICAgICBfYygidi1pY29uIiwgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJpY29ucyIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYXY6ICIiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAibWluLXdpZHRoIjogIiIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9yOiAid2hpdGUiLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaWdodDogIiIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkb21Qcm9wczogeyB0ZXh0Q29udGVudDogX3ZtLl9zKGl0ZW0uaWNvbikgfQogICAgICAgICAgICAgICAgICAgICAgICAgIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdLAogICAgICAgICAgICAxCiAgICAgICAgICApCiAgICAgICAgXSwKICAgICAgICAxCiAgICAgICksCiAgICAgIF9jKAogICAgICAgICJiLW1vZGFsIiwKICAgICAgICB7CiAgICAgICAgICByZWY6ICJteS1tb2RhbCIsCiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhY3RVUyIsCiAgICAgICAgICBhdHRyczogewogICAgICAgICAgICBzaXplOiAibGciLAogICAgICAgICAgICBjZW50ZXJlZDogIiIsCiAgICAgICAgICAgICJoaWRlLWZvb3RlciI6ICIiLAogICAgICAgICAgICB0aXRsZTogIkNvbnRhY3QgVXMgISIKICAgICAgICAgIH0KICAgICAgICB9LAogICAgICAgIFsKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiZC1ibG9jayB0ZXh0LWNlbnRlciIgfSwgWwogICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICBfdm0uX3YoIldhbnQgdG8gZGlzY3VzcyBzb21lIHdvcms/IEp1c3QgZHJvcCBhIG1lc3NhZ2UgYmVsb3ciKQogICAgICAgICAgICBdKQogICAgICAgICAgXSksCiAgICAgICAgICBfYygKICAgICAgICAgICAgImZvcm0iLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgcmVmOiAiZm9ybSIsCiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJjb250YWN0TW9kYWwiLAogICAgICAgICAgICAgIGF0dHJzOiB7IGFjdGlvbjogImh0dHBzOi8vZm9ybXNwcmVlLmlvL3hnZXpneXl3IiwgbWV0aG9kOiAiUE9TVCIgfQogICAgICAgICAgICB9LAogICAgICAgICAgICBbCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiZGl2IiwKICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgX2MoImItZm9ybS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgICAgICAgaWQ6ICJuYW1lLWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiICBOYW1lIgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSksCiAgICAgICAgICAgICAgICAgIF9jKCJiLWZvcm0taW5wdXQiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGlkOiAiZW1haWwtaW5wdXQiLAogICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWQ6ICIiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICIgIEVtYWlsIgogICAgICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAgICAgbW9kZWw6IHsKICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0uZW1haWwsCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5lbWFpbCA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJlbWFpbCIKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICBfYygiYi1mb3JtLWlucHV0IiwgewogICAgICAgICAgICAgICAgICAgIGF0dHJzOiB7CiAgICAgICAgICAgICAgICAgICAgICBpZDogInBob25lLWlucHV0IiwKICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkOiAiIiwKICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiAiIFBob25lIE5vLiIKICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgIG1vZGVsOiB7CiAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLm5hbWUsCiAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogZnVuY3Rpb24oJCR2KSB7CiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5uYW1lID0gJCR2CiAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgZXhwcmVzc2lvbjogIm5hbWUiCiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICB9KQogICAgICAgICAgICAgICAgXSwKICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICApLAogICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgImRpdiIsCiAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgIF9jKCJiLWZvcm0tdGV4dGFyZWEiLCB7CiAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgICAgICAgIGlkOiAidGV4dGFyZWEiLAogICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICJZb3VyIG1lc3NhZ2UuLi4iLAogICAgICAgICAgICAgICAgICAgICAgcm93czogIjUiCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBtb2RlbDogewogICAgICAgICAgICAgICAgICAgICAgdmFsdWU6IF92bS50ZXh0LAogICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6IGZ1bmN0aW9uKCQkdikgewogICAgICAgICAgICAgICAgICAgICAgICBfdm0udGV4dCA9ICQkdgogICAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICAgIGV4cHJlc3Npb246ICJ0ZXh0IgogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgfSkKICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAxCiAgICAgICAgICAgICAgKQogICAgICAgICAgICBdCiAgICAgICAgICApLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtdC0zIG14LWF1dG8iLCBhdHRyczogeyB2YXJpYW50OiAicHJpbWFyeSIgfSB9LAogICAgICAgICAgICBbX3ZtLl92KCJTdWJtaXQiKV0KICAgICAgICAgICkKICAgICAgICBdLAogICAgICAgIDEKICAgICAgKSwKICAgICAgX3ZtLl9tKDApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gWwogIGZ1bmN0aW9uKCkgewogICAgdmFyIF92bSA9IHRoaXMKICAgIHZhciBfaCA9IF92bS4kY3JlYXRlRWxlbWVudAogICAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgICByZXR1cm4gX2MoImRpdiIsIHsgc3RhdGljU3R5bGU6IHsgIm1hcmdpbi10b3AiOiAiMTAwcHgiIH0gfSwgWwogICAgICBfYygKICAgICAgICAiZGl2IiwKICAgICAgICB7CiAgICAgICAgICBzdGF0aWNDbGFzczogImNvbnRhaW5lci1mbHVpZCBzZXJ2aWNlIiwKICAgICAgICAgIHN0YXRpY1N0eWxlOiB7ICJ0ZXh0LWFsaWduIjogImNlbnRlciIgfQogICAgICAgIH0sCiAgICAgICAgWwogICAgICAgICAgX2MoCiAgICAgICAgICAgICJkaXYiLAogICAgICAgICAgICB7CiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJyb3ciLAogICAgICAgICAgICAgIHN0YXRpY1N0eWxlOiB7CiAgICAgICAgICAgICAgICB3aWR0aDogIjUwJSIsCiAgICAgICAgICAgICAgICAidGV4dC1hbGlnbiI6ICJjZW50ZXIiLAogICAgICAgICAgICAgICAgbWFyZ2luOiAiMCBhdXRvIgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgWwogICAgICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTEyIiB9LCBbCiAgICAgICAgICAgICAgICBfYygiaDEiLCBbX3ZtLl92KCJTZXJ2aWNlcyIpXSksCiAgICAgICAgICAgICAgICBfYygicCIsIFsKICAgICAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgICAgICJXZSBhcmUgYSBzdGFydHVwIGluY3ViYXRvciBhbmQgd2Ugc3RyaWN0bHkgZm9sbG93IEFnaWxlIGFuZCB0ZXN0IGRyaXZlbiBkZXZlbG9wbWVudC4iCiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgXSkKICAgICAgICAgICAgXQogICAgICAgICAgKQogICAgICAgIF0KICAgICAgKSwKICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb250YWluZXItZmx1aWQiIH0sIFsKICAgICAgICBfYygiZGl2IiwgeyBzdGF0aWNDbGFzczogInJvdyIgfSwgWwogICAgICAgICAgX2MoImRpdiIsIHsgc3RhdGljQ2xhc3M6ICJjb2wtbWQtNCIgfSwgWwogICAgICAgICAgICBfYygiaW1nIiwgewogICAgICAgICAgICAgIHN0YXRpY0NsYXNzOiAiY29sdW1uLWltYWdlIGltZy1yZXNwb25zaXZlIiwKICAgICAgICAgICAgICBhdHRyczogewogICAgICAgICAgICAgICAgc3JjOiByZXF1aXJlKCIuLi9hc3NldHMvd2ViZGV2ZWxvcG1lbnQuc3ZnIiksCiAgICAgICAgICAgICAgICBhbHQ6ICJXZWIgRGV2ZWxvcG1lbnQiCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInNlcnZpY2UtY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiV2ViIERldmVsb3BtZW50IikKICAgICAgICAgICAgXSksCiAgICAgICAgICAgIF9jKCJwIiwgeyBzdGF0aWNDbGFzczogInNlcnZpY2UtY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigKICAgICAgICAgICAgICAgICJXZSBkZXZlbG9wIFNjYWxhYmxlIFdlYiBBcHBsaWNhdGlvbnMgdGhhdCBjYW4gaGFuZGxlIHRyYWZmaWMgb2YgbWlsbGlvbiB1c2VycywgQ2xvdWQgYmFzZWQgV2ViIEFwcHMgb24gQVdTL0dvb2dsZSBTZXJ2aWNlcy4gV2UgYWxzbyBwcm92aWRlIEhvc3Rpbmcgb24gQ2xvdWQgQmFzZWQgU29sdXRpb25zLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbHVtbi1pbWFnZSBpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL3dlYmRlc2lnbi5zdmciKSwKICAgICAgICAgICAgICAgIGFsdDogIldlYiBEZXNpZ24iCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9KSwKICAgICAgICAgICAgX2MoImgzIiwgeyBzdGF0aWNDbGFzczogInNlcnZpY2UtY29udGVudCIgfSwgWwogICAgICAgICAgICAgIF92bS5fdigiV2ViIERlc2lnbmluZyIpCiAgICAgICAgICAgIF0pLAogICAgICAgICAgICBfYygicCIsIHsgc3RhdGljQ2xhc3M6ICJzZXJ2aWNlLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoCiAgICAgICAgICAgICAgICAiT3VyIEdvYWwgaXMgdG8gcHJvdmlkZSBTaW1wbGUgYW5kIFNtYXJ0IFdlYnNpdGVzIHdoaWNoIGFyZSBFYXN5IFRvIE5hdmlnYXRlIGFuZCBSZXNwb25zaXZlIGluIE5hdHVyZS4gV2UgdXNlIEF0b21pYyBEZXNpZ24gTWV0aG9kb2xvZ3kgdG8gcHVibGlzaCB0aGUgYmVzdCBwb3NzaWJsZSBSZXN1bHRzLiIKICAgICAgICAgICAgICApCiAgICAgICAgICAgIF0pCiAgICAgICAgICBdKSwKICAgICAgICAgIF9jKCJkaXYiLCB7IHN0YXRpY0NsYXNzOiAiY29sLW1kLTQiIH0sIFsKICAgICAgICAgICAgX2MoImltZyIsIHsKICAgICAgICAgICAgICBzdGF0aWNDbGFzczogImNvbHVtbi1pbWFnZSBpbWctcmVzcG9uc2l2ZSIsCiAgICAgICAgICAgICAgYXR0cnM6IHsKICAgICAgICAgICAgICAgIHNyYzogcmVxdWlyZSgiLi4vYXNzZXRzL21vYmlsZWRldmVsb3BtZW50LnN2ZyIpLAogICAgICAgICAgICAgICAgYWx0OiAiTW9iaWxlIERldmVsb3BtZW50IgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSksCiAgICAgICAgICAgIF9jKCJoMyIsIHsgc3RhdGljQ2xhc3M6ICJzZXJ2aWNlLWNvbnRlbnQiIH0sIFsKICAgICAgICAgICAgICBfdm0uX3YoIk1vYmlsZSBEZXZlbG9wZW1lbnQiKQogICAgICAgICAgICBdKSwKICAgICAgICAgICAgX2MoInAiLCB7IHN0YXRpY0NsYXNzOiAic2VydmljZS1jb250ZW50IiB9LCBbCiAgICAgICAgICAgICAgX3ZtLl92KAogICAgICAgICAgICAgICAgIldlIHByb3ZpZGUgQXBwbGljYXRpb24gZGV2ZWxvcG1lbnQgYWNyb3NzIEFuZHJvaWQgYW5kIGlPUyB3aXRoIGFnaWxlIFVJL1VYIHNvbHV0aW9ucy4gIgogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSkKICAgICAgICAgIF0pCiAgICAgICAgXSkKICAgICAgXSkKICAgIF0pCiAgfQpdCnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZQoKZXhwb3J0IHsgcmVuZGVyLCBzdGF0aWNSZW5kZXJGbnMgfQ=="}]}